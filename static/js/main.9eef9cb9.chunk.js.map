{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","target","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","onValid","useState","Math","random","toString","slice","id","touched","setToched","hasError","hasValidError","htmlFor","classNames","type","placeholder","event","onBlur","validationUrl","test","NewMovie","onAdd","count","setCount","setMovie","getNewMovie","newValue","state","checkRequired","keys","Object","isEmpty","filter","key","forEach","push","some","el","isUrlValid","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9eef9cb9.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} target=\"_blanc\">IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (name: string, newValue: string) => void,\n  onValid?: (value: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  onValid = () => true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n  const hasValidError = !onValid(value) && touched;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(name, event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasValidError && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nconst validationUrl = (value: string) => {\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return pattern.test(value);\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [movie, setMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const getNewMovie = (name:string, newValue: string) => {\n    setMovie(state => ({ ...state, [name]: newValue }));\n  };\n\n  const checkRequired = (): boolean => {\n    const keys = Object.keys(movie);\n    const isEmpty: boolean[] = [];\n\n    keys.filter(key => key !== 'description').forEach(key => (\n      !movie[key as keyof Movie]\n        ? isEmpty.push(true)\n        : isEmpty.push(false)\n    ));\n\n    return isEmpty.some(el => el === true);\n  };\n\n  const isUrlValid = validationUrl(movie.imdbUrl)\n  && validationUrl(movie.imgUrl);\n\n  const submit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!checkRequired() && isUrlValid) {\n      onAdd(movie);\n\n      setMovie({\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      });\n\n      setCount(state => state + 1);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={submit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={getNewMovie}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={getNewMovie}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={getNewMovie}\n        onValid={validationUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={getNewMovie}\n        onValid={validationUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={getNewMovie}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={checkRequired() || !isUrlValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\n\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies(state => [...state, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}